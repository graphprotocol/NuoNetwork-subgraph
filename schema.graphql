type LogTransferBySystem @entity {
  id: ID!
  token: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  by: Bytes! # address
}

type LogTransferByUser @entity {
  id: ID!
  token: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  by: Bytes! # address
}

type LogUserAdded @entity {
  id: ID!
  user: Bytes! # address
  by: Bytes! # address
}

type LogUserRemoved @entity {
  id: ID!
  user: Bytes! # address
  by: Bytes! # address
}

type LogImplChanged @entity {
  id: ID!
  newImpl: Bytes! # address
  oldImpl: Bytes! # address
}

type LogError @entity {
  id: ID!
  methodSig: String! # string
  errMsg: String! # string
}

type LogErrorWithHintBytes32 @entity {
  id: ID!
  bytes32Value: Bytes! # bytes32
  methodSig: String! # string
  errMsg: String! # string
}

type LogErrorWithHintAddress @entity {
  id: ID!
  addressValue: Bytes! # address
  methodSig: String! # string
  errMsg: String! # string
}

type LogNote @entity {
  id: ID!
  sig: Bytes! # bytes4
  guy: Bytes! # address
  foo: Bytes! # bytes32
  bar: Bytes! # bytes32
  wad: BigInt! # uint256
  fax: Bytes! # bytes
}

#AccountFactoryV2
type LogAccountCreated @entity {
  id: ID!
  user: Bytes! # address
  account: Bytes! # address
  by: Bytes! # address
}

type LogSetAuthority @entity {
  id: ID!
  authority: Bytes! # address
}

type LogSetOwner @entity {
  id: ID!
  owner: Bytes! # address
}

#Config Schema
type LogAdminAdded @entity {
  id: ID!
  _admin: Bytes! # address
  _by: Bytes! # address
}

type LogAdminRemoved @entity {
  id: ID!
  _admin: Bytes! # address
  _by: Bytes! # address
}
#Kernel schema
type LogOrderCreated @entity {
  id: ID!
  orderHash: Bytes # bytes32
  account: Bytes # address
  principalToken: Bytes # address
  collateralToken: Bytes # address
  byUser: Bytes # address
  principalAmount: BigInt # uint256
  collateralAmount: BigInt # uint256
  premium: BigInt # uint256
  expirationTimestamp: BigInt # uint256
  fee: BigInt # uint256
  tradeAmount: BigInt # uint256
  token: Bytes # address
  value: BigInt # uint256
}

type LogOrderRepaid @entity {
  id: ID!
  orderHash: Bytes! # bytes32
  valueRepaid: BigInt! # uint256
}

type LogOrderDefaulted @entity {
  id: ID!
  orderHash: Bytes! # bytes32
  reason: String! # string
}

#MKernel schema
type LogOrderLiquidatedByUser @entity {
  id: ID!
  orderHash: Bytes! # bytes32
}

type LogOrderStoppedAtProfit @entity {
  id: ID!
  orderHash: Bytes! # bytes32
}

type LogNoActionPerformed @entity {
  id: ID!
  orderHash: Bytes! # bytes32
}

type LogOrderSettlement @entity {
  id: ID!
  orderHash: Bytes! # bytes32
  valueRepaid: BigInt! # uint256
  reserveProfit: BigInt! # uint256
  reserveLoss: BigInt! # uint256
  collateralLeft: BigInt! # uint256
  userProfit: BigInt! # uint256
  fee: BigInt! # uint256
}

#Reserve Schema

type LogOrderCancelled @entity {
  id: ID!
  orderHash: Bytes! # bytes32
  by: Bytes! # address
}
type LogReserveValuesUpdated @entity {
  id: ID!
  token: Bytes! # address
  updatedTill: BigInt! # uint256
  reserve: BigInt! # uint256
  profit: BigInt! # uint256
  loss: BigInt! # uint256
}

type LogOrderCumulativeUpdated @entity {
  id: ID!
  orderHash: Bytes! # bytes32
  updatedTill: BigInt! # uint256
  value: BigInt! # uint256
}

type LogRelease @entity {
  id: ID!
  token: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  by: Bytes! # address
}

type LogLock @entity {
  id: ID!
  token: Bytes! # address
  from: Bytes! # address
  value: BigInt! # uint256
  profit: BigInt! # uint256
  loss: BigInt! # uint256
  by: Bytes! # address
}

type LogLockSurplus @entity {
  id: ID!
  forToken: Bytes! # address
  token: Bytes! # address
  from: Bytes! # address
  value: BigInt! # uint256
}

type LogTransferSurplus @entity {
  id: ID!
  forToken: Bytes! # address
  token: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
}

#DSGuard contract
type LogPermit @entity {
  id: ID!
  src: Bytes! # bytes32
  dst: Bytes! # bytes32
  sig: Bytes! # bytes32
}

type LogForbid @entity {
  id: ID!
  src: Bytes! # bytes32
  dst: Bytes! # bytes32
  sig: Bytes! # bytes32
}

#ReserveEscrow contract
type LogTransfer @entity {
  id: ID!
  token: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
}

type LogTransferFromAccount @entity {
  id: ID!
  account: Bytes! # address
  token: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
}

#KyberConnector contract
type LogTrade @entity {
  id: ID!
  _from: Bytes! # address
  _srcToken: Bytes! # address
  _destToken: Bytes! # address
  _srcTokenValue: BigInt! # uint256
  _maxDestTokenValue: BigInt! # uint256
  _destTokenValue: BigInt! # uint256
  _srcTokenValueLeft: BigInt! # uint256
  _exchangeRate: BigInt! # uint256
}

#Custom entities
type User @entity {
  id: ID! #address of the user
  totalOrdersCreated: Int!
  totalOrdersSettled: Int!
  totalOrdersDefaulted: Int!
  totalOrdersLiquidated: Int!
#  userCredibility: Int #Credibility of the user for future loans
}

type OrderSummary @entity {
  id: ID! #global ID for order summary (1)
  totalOrdersCreated: Int!
  totalOrdersSettled: Int!
  totalOrdersDefaulted: Int!
  totalOrdersLiquidated: Int!
}
